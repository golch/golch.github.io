<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>골치의 블로그</title>
    <description>개발자 골치의 블로그입니다. 주로 웹기술 관련 내용을 다룹니다.
</description>
    <link>http://golch.gitub.io/</link>
    <atom:link href="http://golch.gitub.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 16 Apr 2017 19:43:33 +0900</pubDate>
    <lastBuildDate>Sun, 16 Apr 2017 19:43:33 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Quick tour of Polymer</title>
        <description>&lt;p&gt;이 문서는 개인 스터디 목적으로 아래 링크의 문서를 번역한 것입니다(&lt;del&gt;발번역…&lt;/del&gt;). 코드 동작을 직접 보고싶으신 분들은 아래 링크에서 확인하시기 바랍니다.
&lt;a href=&quot;https://www.polymer-project.org/2.0/start/quick-tour&quot;&gt;https://www.polymer-project.org/2.0/start/quick-tour&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;확실하게, Polymer 는 웹 컴포넌트 만드는 것을 간단하게 해준다.&lt;/p&gt;

&lt;p&gt;Custom element는 boilerplate 코드를 줄이고, 복잡하고 상호작용하는 element 제작을 훨씬 쉽게 만들어주는 Polymer의 특별한 기능들에 이점을 줄 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Element 등록&lt;/li&gt;
  &lt;li&gt;Lifecycle 콜백&lt;/li&gt;
  &lt;li&gt;Property 관찰&lt;/li&gt;
  &lt;li&gt;Shadow DOM template&lt;/li&gt;
  &lt;li&gt;데이터 바인딩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아무것도 설치하지 않아도, 이 섹션에서 당신은 Polymer 라이브러리를 간단히 살펴볼 수 있다. 어떤 샘플 코드에서든지 Edit on Plunker 버튼을 클릭하면 코드를 수정하고 즉시 확인할 수 있다.
아래 예제 중 더 공부하고 싶은 것이 있다면 버튼을 클릭하라.&lt;/p&gt;

&lt;h2 id=&quot;element--register-an-element&quot;&gt;Element 등록하기 (Register an element)&lt;/h2&gt;
&lt;p&gt;Element를 등록하기 위해서는, &lt;code class=&quot;highlighter-rouge&quot;&gt;Polymer.Element&lt;/code&gt; 를 확장한 ES6 클래스를 생성해야한다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;customElements.define&lt;/code&gt; 메서드를 호출해야한다. 이 메서드는 새로운 element를 브라우저에 등록한다. Element 등록할 때는 element의 이름과 클래스 이름을 같게 만들고 property와 메서드를 추가한다. 커스텀 element의 이름은 &lt;strong&gt;반드시 ASCII 문자로 시작해야 하며 대쉬(-)를 포함해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;custom-element.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Define the class for a new element called custom-element&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomElement&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;custom-element&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm a custom-element.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Register the new element with the browser&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CustomElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;custom-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;custom-element&amp;gt;&amp;lt;/custom-element&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 예제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;custom-element&amp;gt;&lt;/code&gt; 를 추가하기 위해서, 그것이 초기화 될 때 lifecycle 콜백을 사용한다. 커스텀 element의 초기화가 끝나면, &lt;code class=&quot;highlighter-rouge&quot;&gt;ready&lt;/code&gt; lifecycle 콜백이 호출된다. 당신은 element 가 생성된 이후에, 단 한번 &lt;code class=&quot;highlighter-rouge&quot;&gt;ready&lt;/code&gt; 콜백을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/registering-elements&quot;&gt;Learn more : Element Registration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/registering-elements#lifecycle-callbacks&quot;&gt;Learn more : Lifecycle Callbacks&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;shadow-dom-&quot;&gt;Shadow DOM 추가하기&lt;/h2&gt;
&lt;p&gt;수많은 element는 내부의 DOM nodes를 포함하고 있다. DOM nodes 는 element의 UI와 행동을 수행한다. 당신은 당신의 element에 shadow DOM tree를 생성하기 위해서 Polymer’s DOM 템플릿을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dom-element.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-element&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm a DOM element. This is my shadow DOM!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomElement&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dom-element&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DomElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DomElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-element&amp;gt;&amp;lt;/dom-element&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/dom-template&quot;&gt;Learn more : DOM Templating&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;shadow-dom--1&quot;&gt;Shadow DOM 조립하기&lt;/h2&gt;
&lt;p&gt;Shadow DOM은 구성을 조작할 수 있도록 해준다. Element의 자식은 분산될 수 있는데, 마치 shadow DOM tree에 삽입된 것처럼 그려진다.
이 예제는 단순한 태그를 생성하는데, 이것은 이미지를 스타일 추가된 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;로 감싼 태그이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;picture-frame.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;picture-frame&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- scoped CSS for this element --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- any children are rendered here --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PictureFrame&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;picture-frame&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PictureFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PictureFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;picture-frame.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;picture-frame&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.polymer-project.org/images/logos/p-logo-32.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture-frame&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dom-module&amp;gt;&lt;/code&gt; 내부에서 정의된 CSS는 해당 element의 shadow DOM의 범위에 한한다. 따라서 여기서 정의된 div 규칙도 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;picture-frame&amp;gt;&lt;/code&gt; 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 태그에서만 적용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/shadow-dom#shadow-dom-and-composition&quot;&gt;Learn more : Composition &amp;amp; Distribution&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;데이터바인딩 사용하기&lt;/h2&gt;
&lt;p&gt;당연하게도, 정적인 shadow DOM을 사용하는 것으로는 충분하지 않다. 당신은 보통 당신의 element가 shadow DOM을 동적으로 업데이트 하기를 원할것이다.&lt;/p&gt;

&lt;p&gt;데이터바인딩은 당신의 element 변화를 빠르게 전달하고 boilerplate 코드를 줄이기에 아주 좋은 방법이다. 당신은 컴포넌트에 작성된 property들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;(double-mustache) 문법을 통해서 바인드할 수 있다.&lt;/code&gt;는 그 괄호 안의 값이 가리키는 property 값에 의해서 대체된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name-tag.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- import polymer-element --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name-tag&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- bind to the &quot;owner&quot; property --&amp;gt;&lt;/span&gt;
    This is &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;'s name-tag element.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NameTag&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name-tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;// set this element's owner property&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name-tag.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name-tag&amp;gt;&amp;lt;/name-tag&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/data-binding&quot;&gt;Learn more : Data Binding&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;declare-a-property&quot;&gt;프로퍼티의 선언(Declare a property)&lt;/h2&gt;
&lt;p&gt;Property는 element의 공개 API에서 중요한 부분이다. Polymer의 선언된 property는 수많은 공통패턴을 제공한다. 예를들면 기본값을 셋팅하고, 마크업으로부터 property를 설정하고, property 변화를 관찰하는 것 등을 제공한다.
아래 예제는 위 마지막 예제에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;owner&lt;/code&gt; 프로퍼티를 선언한다. 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 마크업으로부터 owner property 설정하는 것을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;configurable-name-tag.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;configurable-name-tag&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- bind to the &quot;owner&quot; property --&amp;gt;&lt;/span&gt;
    This is &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;[[owner]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;'s name-tag element.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConfigurableNameTag&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configurable-name-tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// configure owner property&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConfigurableNameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConfigurableNameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;configurable-name-tag.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- configure a property from markup by setting
         the corresponding attribute                 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;configurable-name-tag&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;owner=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scott&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/configurable-name-tag&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/properties&quot;&gt;Learn more : Declared Properties&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;bind-to-a-property&quot;&gt;프로퍼티 바인딩 하기(Bind to a property)&lt;/h2&gt;
&lt;p&gt;다음 콘텐츠에 덧붙이자면, 당신은 element의 property에 바인딩을 할 수 있다(&lt;code class=&quot;highlighter-rouge&quot;&gt;property-name=&quot;[[binding]]&quot;&lt;/code&gt;을 이용해서). Polymer property는 선택적으로 양방향 바인딩을 지원할 수 있는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;property-name=&quot;&quot;&lt;/code&gt; 과 같이 표현한다.
이 예제는 양방향 바인딩을 사용한다 : 커스텀 element인 &lt;code class=&quot;highlighter-rouge&quot;&gt;iron-input&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;owner&lt;/code&gt; property를 바인딩 해서 사용자 타입에 따라서 업데이트 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;editable-name-tag.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/iron-input+polymerelements+:2.0-preview/shadycss+webcomponents+1.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- import the iron-input element --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/iron-input+polymerelements+:2.0-preview/shadycss+webcomponents+1.0.0-rc.2/components/iron-input/iron-input.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editable-name-tag&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- bind to the &quot;owner&quot; property --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;[[owner]]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;'s name-tag element.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iron-input exposes a two-way bindable input value --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;iron-input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bind-value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iron-input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your name here...&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iron-input&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EditableNameTag&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;editable-name-tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;// configure the owner property&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Daniel'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EditableNameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EditableNameTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editable-name-tag.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;editable-name-tag&amp;gt;&amp;lt;/editable-name-tag&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;iron-input&lt;/code&gt; 은 기본태그인 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;을 감싸고, 양방향 바인딩과 값 확인(validation)을 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;dom-repeat---&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dom-repeat&amp;gt;&lt;/code&gt; 사용해서 템플릿 반복하기&lt;/h2&gt;
&lt;p&gt;템플릿 반복자(&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-repeat&lt;/code&gt;)는 배열(array)로 바인드하는데 특화된 템플릿이다. 이것은 템플릿의 콘텐츠들을 배열의 항목으로 포함하는 하나의 인스턴스(instance)를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;employee-list.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- import polymer-element --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/polymer-element.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- import template repeater --&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/polymer+2.0.0-rc.2/components/polymer/lib/elements/dom-repeat.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt; Employee list: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dom-repeat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;First name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Last name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeList&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;employee-list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;// set this element's employees property&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ayesha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Johnson'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fatma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kumari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tony'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Morelli'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EmployeeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmployeeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polygit.org/webcomponentsjs+1.0.0-rc.5/components/webcomponentsjs/webcomponents-loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;employee-list.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;employee-list&amp;gt;&amp;lt;/employee-list&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/devguide/templates&quot;&gt;Learn more : Template Repeater&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 12:19:20 +0900</pubDate>
        <link>http://golch.gitub.io/polymer/2017/04/16/Quick-tour-of-Polymer.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/polymer/2017/04/16/Quick-tour-of-Polymer.html</guid>
        
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Django MySQL 연동하기</title>
        <description>&lt;p&gt;Django Tutorial 을 진행하면 기본 database 가 SQLite 로 되어있는 것을 볼 수 있다. 보통 웹사이트를 만들 때에 많이 사용하는 MySQL로 database 를 바꾸는 방법을 알아보자.&lt;br /&gt;
&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/intro/tutorial02/&quot; target=&quot;_blank&quot;&gt;원문참고&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PyMySQL 라이브러리 사용&lt;br /&gt;
django 를 사용할때 MySQLdb 이걸 이용해서 DB연결을 하는 것이 보통이나 이 라이브러리가 python 버전에 영향을 받는 것 같다.(python3.x 지원을 안하는듯..)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 MySQL 연동을 위해서는 다른 라이브러리를 사용해야 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install PyMySQL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 명령어로 설치하자. &lt;a href=&quot;https://github.com/PyMySQL/PyMySQL&quot; target=&quot;_blank&quot;&gt;PyMySQL 참고&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;** 참고 : MySQL의 설치는 딱히 설명하지 않고 넘어간다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;settings.py&lt;br /&gt;
django 로 돌아와서 settings.py 파일의 DATABASES 부분을 아래와 같이 설정한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pymysql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pymysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_as_MySQLdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;중략&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#MySQL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'inform_place'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django-test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1111'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3306'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이렇게 코딩한 후 다시 실행해봐야 한다. 단, migration 하는 것을 잊지말자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;에러 없이 잘 동작한다면 서버를 올려보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;markdown 으로 포스팅 첨 해보는데 생각보다 편하다.&lt;br /&gt;
우분투나 맥이나 아무데서나 쉽게할 수 있는듯..&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Jan 2017 14:39:20 +0900</pubDate>
        <link>http://golch.gitub.io/django/2017/01/20/Django-MySQL-%EC%97%B0%EB%8F%99.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/django/2017/01/20/Django-MySQL-%EC%97%B0%EB%8F%99.html</guid>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Sep 2016 13:02:20 +0900</pubDate>
        <link>http://golch.gitub.io/jekyll/update/2016/09/23/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/jekyll/update/2016/09/23/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>[angularJS] 책 “프로 angularJS” 실습 #2</title>
        <description>&lt;p&gt;지난 포스팅을 통해서 샘플 웹사이트가 구동 되었다.&lt;br /&gt;
참고 : &lt;a href=&quot;https://golch51.wordpress.com/2016/04/27/angularjs-%ec%b1%85-%ed%94%84%eb%a1%9c-angularjs-%ec%8b%a4%ec%8a%b5-1/&quot;&gt;https://golch51.wordpress.com/2016/04/27/angularjs-책-프로-angularjs-실습-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이제 데이터를 입력해야 한다. 아래 그림처럼 속성을 생성하자.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golch51.files.wordpress.com/2016/05/6b4634e2-694f-46d7-8c1a-67166d5dc589.png&quot;&gt;&lt;img src=&quot;/assets/6b4634e2-694f-46d7-8c1a-67166d5dc589.png&quot; alt=&quot;6B4634E2-694F-46D7-8C1A-67166D5DC589&quot; width=&quot;660&quot; height=&quot;508&quot; class=&quot;alignnone size-full wp-image-453&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;속성 생성 완료 후 좌측 상단의 DATA를 클릭하여 아래와 같이 데이터를 입력한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golch51.files.wordpress.com/2016/05/a43f3fe6-5231-495b-b2e9-45987bb3bb4a.png&quot;&gt;&lt;img src=&quot;/assets/a43f3fe6-5231-495b-b2e9-45987bb3bb4a.png&quot; alt=&quot;A43F3FE6-5231-495B-B2E9-45987BB3BB4A&quot; width=&quot;660&quot; height=&quot;413&quot; class=&quot;alignnone size-full wp-image-454&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기까지 입력이 완료되었다면, 이제 본격적으로 angularjs 어플리케이션을 만들어볼 차례이다. 먼저 디렉토리 구조부터 잡아보자. 이 구조는 책에 나온 그대로 만들어 보았다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golch51.files.wordpress.com/2016/05/73f30c2e-634b-4b16-8ac4-b338393d0576.png&quot;&gt;&lt;img src=&quot;/assets/73f30c2e-634b-4b16-8ac4-b338393d0576.png&quot; alt=&quot;73F30C2E-634B-4B16-8AC4-B338393D0576&quot; width=&quot;434&quot; height=&quot;137&quot; class=&quot;alignnone size-full wp-image-455&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;angular-1.5.5 폴더는 angularjs를 다운로드 한 폴더이다. 본 프로젝트와는 관련이 없으니 무시해도 된다. bootstrap- 폴더 역시 무시해도 되는 폴더이다. 오른쪽에 하위폴더가 중요한데, angularjs 폴더는 지금부터 살펴볼 클라이언트 부분 파일들이 모여있다. node_server는 nodejs 서버가 있는 폴더이고, sportstore 는 deployd가 설치된 폴더이다. 책을 보고 나름의 구조를 만들어도 괜찮지만 혹시 이런것 때문에 진도를 못나가는 사람이 있을까봐 적어놓는다.&lt;/p&gt;
&lt;p&gt;자 이제 nodejs 서버를 구동해야 한다. 먼저 아래와 같이 server.js 파일을 만들자.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br /&gt;
var connect = require(&amp;#039;connect&amp;#039;),&lt;br /&gt;
    serveStatic = require(&amp;#039;serve-static&amp;#039;);&lt;/p&gt;
&lt;p&gt;var app = connect();&lt;/p&gt;
&lt;p&gt;app.use(serveStatic(&amp;quot;../angularjs&amp;quot;));&lt;br /&gt;
app.listen(5000);&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;이 파일은 node_server폴더에 넣는다. 그리고 터미널에서 node server.js 실행을 하면 서버가 구동된다.&lt;br /&gt;
그리고 아래의 app.html 파일을 만든다. 이 파일은 angularjs 폴더에 넣어야 한다.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br /&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;
&amp;lt;html ng-app=&amp;quot;sportsStore&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;head&amp;gt;&lt;br /&gt;
  &amp;lt;title&amp;gt;SportsStore&amp;lt;/title&amp;gt;&lt;br /&gt;
  &amp;lt;a href=&amp;quot;http://angular.js&amp;quot;&amp;gt;http://angular.js&amp;lt;/a&amp;gt;&lt;br /&gt;
  &amp;lt;link href=&amp;quot;bootstrap.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;&lt;br /&gt;
  &amp;lt;link href=&amp;quot;bootstrap-theme.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;&lt;/p&gt;
&lt;p&gt;    angular.module(&amp;quot;sportsStore&amp;quot;,[]);&lt;/p&gt;
&lt;p&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;
&amp;lt;body&amp;gt;&lt;br /&gt;
  &amp;lt;div class=&amp;quot;navbar navbar-inverse&amp;quot;&amp;gt;&lt;br /&gt;
    &amp;lt;a class=&amp;quot;navbar-brand&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;SPORTS STORE&amp;lt;/a&amp;gt;&lt;br /&gt;
  &amp;lt;/div&amp;gt;&lt;br /&gt;
  &amp;lt;div class=&amp;quot;panel panel-default row&amp;quot;&amp;gt;&lt;br /&gt;
    &amp;lt;div class=&amp;quot;col-xs-3&amp;quot;&amp;gt;&lt;br /&gt;
      Categories go here&lt;br /&gt;
    &amp;lt;/div&amp;gt;&lt;br /&gt;
    &amp;lt;div class=&amp;quot;col-xs-8&amp;quot;&amp;gt;&lt;br /&gt;
      Products go here&lt;br /&gt;
    &amp;lt;/div&amp;gt;&lt;br /&gt;
  &amp;lt;/div&amp;gt;&lt;br /&gt;
&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;
[/code]&lt;/p&gt;
&lt;p&gt;그리고 웹브라우저에서 loaclhost:5000/app.html 이 주소로 접속하면 아래와 같이 서버가 정상적으로 구동되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golch51.files.wordpress.com/2016/05/cfe60f64-00b0-4d4a-8a6c-e5e6781e50db.png&quot;&gt;&lt;img src=&quot;/assets/cfe60f64-00b0-4d4a-8a6c-e5e6781e50db.png&quot; alt=&quot;CFE60F64-00B0-4D4A-8A6C-E5E6781E50DB&quot; width=&quot;483&quot; height=&quot;175&quot; class=&quot;alignnone size-full wp-image-456&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;아직 책 뒷부분은 읽어보지 않아서 어떤 방식으로 진행될지 잘 모르겠으나, 아마도 우리의 프로젝트는 nodejs서버 위에 angularjs로 클라이언트를 만드는 것이고, deployd서버는 데이터를 제공하는 용도로만 사용할 것 같다.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 16:21:07 +0900</pubDate>
        <link>http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2016/05/02/angularjs-ec-b1-85-ed-94-84-eb-a1-9c-angularjs-ec-8b-a4-ec-8a-b5-2.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2016/05/02/angularjs-ec-b1-85-ed-94-84-eb-a1-9c-angularjs-ec-8b-a4-ec-8a-b5-2.html</guid>
        
        <category>adam freeman</category>
        
        <category>angularjs</category>
        
        <category>book review</category>
        
        <category>프로 angularjs</category>
        
        <category>javascript</category>
        
        
        <category>프로그래밍</category>
        
      </item>
    
      <item>
        <title>[angularJS] 책 &quot;프로 angularJS&quot; 실습 #1</title>
        <description>&lt;p&gt;자바 스크립트 공부의 일환으로 클라이언트 프레임워크인 angularJS 를 공부하기로 했다. 몇달간 개발쪽에 손을 놓고있다가 새로 공부하는거라 두근두근하다. 이리저리 웹서핑을 해보았는데 그나마 유용한 사이트는 2군데 정도 있는듯 하다.&lt;br /&gt;
https://www.angularjs.org/ (angularjs 공식사이트)&lt;br /&gt;
http://www.w3schools.com/angular/default.asp (w3cscools.com)&lt;/p&gt;
&lt;p&gt;좋기는 한데 둘다 영어라서 읽는데 너무 오래걸린다. 그래서 먼저 공부해본 친구에게 책을 추천받았다. &quot;프로 angularJS&quot;라는 책인데 저자인 애덤 프리먼은 이 책 이외에도 &quot;프로 Jquery&quot;, &quot;프로 asp.net&quot;등 여러 권을 집필한 사람이다. 이쪽으로는 꽤 유명한 분인듯..&lt;/p&gt;
&lt;p&gt;이 포스팅은 책에 있는 실습을 직접 해보고 정리하는 목적으로 쓰여질 예정이다. 혹시라도 출판사나 저자에게 이 포스팅이 불이익이 된다면 언제든 삭제할 용의가 있다.&lt;/p&gt;
&lt;p&gt;자 그럼 첫 번째로 개발환경을 셋팅해보자. 책에서 알려주는대로 제일 먼저 nodejs를 설치해야 한다. 서버를 nodejs로 만들건 아니지만, 자바스크립트 애플리케이션을 개발하는 범용적인 프레임워크 기능을 제공한다고 책에 나와있다. 참고로 초반에 나오는 javascript 전반적인 내용과 angularjs의 이론적인 부분은 스킵하였다. 본격적인 실습에 들어가는 6장의 내용부터 담는 것이니 앞부분이 궁금하다면 책을 사서 보는 것이 좋겠다.(출판업계의 발전을 위해서..)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://nodejs.org/ko/ 여기서 nodejs를 다운로드해서 설치하자(무려 한글번역). 버튼을 클릭하면 내 PC의 OS에 맞는 파일이 다운로드 되고, 설치하는 법은 따로 설명하지 않겠다.(이정도는 다 되겠지..)&lt;/li&gt;
&lt;li&gt;다음은 angularjs 파일을 다운로드 한다. https://www.angularjs.org/&lt;br /&gt;
주의할 점은 다운로드 창에서 stable 과 uncompressed 옵션을 반드시 체크하자. 다운로드 버튼을 누르면 브라우저의 새 탭에 js 파일이 열린다. 이 내용을 복사해서 새 파일(angular.js)로 저장하자.&lt;/li&gt;
&lt;li&gt;deployd 설치 http://deployd.com/&lt;br /&gt;
아래에서 본인 PC의 OS에 맞게 설치하면 된다.&lt;br /&gt;
&lt;a href=&quot;https://golch51.files.wordpress.com/2016/04/ecbaa1ecb2981111.png&quot;&gt;&lt;img src=&quot;/assets/ecbaa1ecb2981111.png&quot; alt=&quot;캡처111&quot; width=&quot;660&quot; height=&quot;392&quot; class=&quot;alignnone size-full wp-image-447&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;나는 Mac OS 니까 npm install 로 설치하고, mongoDB를 따로 설치하였다.&lt;/p&gt;
&lt;p&gt;여기까지 설치하고 나서 작업할 디렉토리를 정한 후 터미널을 열고 그 디렉토리로 이동한다. 그리고&lt;br /&gt;
dpd create sportsstore 를 입력한다.&lt;/p&gt;
&lt;p&gt;그러면 폴더와 파일들이 막 생성되고, 다시 dpd -p 5500 sportsstore/app.dpd dashboard 이렇게 입력하면 로컬 서버가 시작된다.&lt;/p&gt;
&lt;p&gt;브라우저에서 localhost:5500/dashboard/ 를 입력하면 아래 그림과 같은 웹 어플리케이션이 구동되는 것을 볼수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golch51.files.wordpress.com/2016/04/pasted-image-at-2016_04_27-04_56-pm.png&quot;&gt;&lt;img src=&quot;/assets/pasted-image-at-2016_04_27-04_56-pm.png&quot; alt=&quot;Pasted image at 2016_04_27 04_56 PM&quot; width=&quot;660&quot; height=&quot;413&quot; class=&quot;alignnone size-full wp-image-449&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;휴. 정리하면서 하려니 진도도 느리고 힘들다. 오늘은 일단 여기까지...&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Apr 2016 16:59:10 +0900</pubDate>
        <link>http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EC%BB%B4%ED%93%A8%ED%84%B0/2016/04/27/angularjs-ec-b1-85-ed-94-84-eb-a1-9c-angularjs-ec-8b-a4-ec-8a-b5-1.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EC%BB%B4%ED%93%A8%ED%84%B0/2016/04/27/angularjs-ec-b1-85-ed-94-84-eb-a1-9c-angularjs-ec-8b-a4-ec-8a-b5-1.html</guid>
        
        <category>adam freeman</category>
        
        <category>angularjs</category>
        
        <category>book review</category>
        
        <category>프로 angularjs</category>
        
        <category>javascript</category>
        
        
        <category>프로그래밍</category>
        
        <category>컴퓨터</category>
        
      </item>
    
      <item>
        <title>밴드코로나 in JW메리어트 동대문</title>
        <description>&lt;p&gt;와인앤버스커 밴드코로나 공연&lt;br /&gt;
&lt;a href=&quot;https://golch51.files.wordpress.com/2016/04/dsc_0028.jpg&quot; rel=&quot;attachment wp-att-434&quot;&gt;&lt;img src=&quot;/assets/dsc_0028.jpg&quot; alt=&quot;DSC_0028&quot; width=&quot;474&quot; height=&quot;314&quot; class=&quot;alignnone size-full wp-image-434&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 01:07:28 +0900</pubDate>
        <link>http://golch.gitub.io/%EC%82%AC%EC%A7%84/2016/04/01/eb-b0-b4-eb-93-9c-ec-bd-94-eb-a1-9c-eb-82-98-in-jw-eb-a9-94-eb-a6-ac-ec-96-b4-ed-8a-b8-eb-8f-99-eb-8c-80-eb-ac-b8.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%EC%82%AC%EC%A7%84/2016/04/01/eb-b0-b4-eb-93-9c-ec-bd-94-eb-a1-9c-eb-82-98-in-jw-eb-a9-94-eb-a6-ac-ec-96-b4-ed-8a-b8-eb-8f-99-eb-8c-80-eb-ac-b8.html</guid>
        
        
        <category>사진</category>
        
      </item>
    
      <item>
        <title>Ubuntu 14.04 설치함</title>
        <description>&lt;p&gt;우분투를 설치했다!!!&lt;/p&gt;
&lt;p&gt;업무용으로 이걸 사용할 수 있을지 아직 확신은 없어서 windows7 과 멀티부팅이 가능하도록 만들었다.&lt;/p&gt;
&lt;p&gt;업무를 위한 JAVA 개발환경 설치시 windows 와 다르게 문제가 발생한 부분을 메모해 둔다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maven 을 사용하고 있는데 maven resolving dependency 라고 뭔가를 계속 로딩하고 있다....... 왜 그런가 살펴보았더니 기본값으로 설정된 maven repository 위치에 디렉토리 및 파일 생성 권한이 없다. 리눅스 계열에서만 발생할 문제 ㅋㅋ. 그래서 maven repository 위치를 변경하니 해결됨!&lt;/li&gt;
&lt;li&gt;lombok 플러그인 설치(IDE) ...... 실행하면 실행은 잘 되는데 자꾸 에러라고 빨갛게 표시가 된다. 다운받은 프로젝트 소스에 라이브러리로 lombok은 들어있는데 IDE 에 플러그인을 설치 안해서 발생하는 문제. 참고로 IDE는 intellij 를 사용중이다. 플러그인 설치하니 정상동작함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;예전에 우분투 12.04 시절에 설치해서 사용해봤었는데 한글깨짐 및 IDE 문제점 등으로 도저히 못쓰겠다고 판단, 일주일만에 지운적이 있었다. 그런데 이번에 설치해보니 windows 대비 속도도 빠르고, (UI 에 대한 호불호는 나뉠 수 있겠다) 설치도 간편하고, 한글도 잘 지원되는 등 많이 개선되었다. 사용하는 어플리케이션 들이 멀티플랫폼을 많이 지원하는 것도 하나의 요인인듯 하다. 그래서 일부 MS-Office 가 필요한 상황을 제외하고 작업용도로 이번에 사용해보려고 한다.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 14:15:54 +0900</pubDate>
        <link>http://golch.gitub.io/ubuntu/2015/12/24/ubuntu-14-04-ec-84-a4-ec-b9-98-ed-95-a8.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/ubuntu/2015/12/24/ubuntu-14-04-ec-84-a4-ec-b9-98-ed-95-a8.html</guid>
        
        <category>우분투</category>
        
        <category>JAVA</category>
        
        <category>linux</category>
        
        <category>lombok</category>
        
        <category>maven</category>
        
        <category>ubuntu</category>
        
        
        <category>ubuntu</category>
        
      </item>
    
      <item>
        <title>알고리즘 공부 #8</title>
        <description>&lt;p&gt;Algospot 문제 PICNIC&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://algospot.com/judge/problem/read/PICNIC&quot;&gt;https://algospot.com/judge/problem/read/PICNIC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이번에는 튜토리얼 문제가 아닌 '알고리즘 문제 해결 전략’ 이라는 책에 수록된 문제를 풀어보았다. 이 다음에 포스팅 하게 될 NQUEEN 이라는 문제를 풀다가 막혀서 한 단계 쉬운 비슷한 문제에 도전을 하게 된 것. 책의 해설도 필요한 상황이었고 이런 탐색, 경우의 수 류의 문제를 해결하는 능력을 좀더 키우기 위한 선택이었다.&lt;/p&gt;
&lt;p&gt;PICNIC(소풍) 문제는 아이들이 소풍을 가기 위해 짝을 짓는 경우의 수를 구하는 문제이다. 서로 친구인지 아닌지를 가늠하는 것이 포인트인데 이런 문제를 어떻게 풀어야 할지 책에 자세히 해설이 되어있다. 0번 아이부터 시작해서 친구인지 아닌지 검사하는 코드를 만들어야 한다. 이렇게 일일히 검사하는 것을 완전탐색 이라고 한다.&lt;/p&gt;
&lt;p&gt;책에 나와있는 풀이를 보고 문제를 해결하였는데, 완성된 코드를 보면서 배운 점들이 있다.&lt;br /&gt;
1. 친구인지 아닌지?를 판별하는 부분을 areFriends[][] 라는 boolean형의 2차원 배열로 만들었다. 이렇게 만들면 단순히 입력으로 받은 친구(여기서는 정수형)를 담아주기만 해도 다른 코드 없이 판별이 가능하다. 단, 순서를 항상 숫자가 작은 것을 앞에 넣어주어야 한다.&lt;br /&gt;
2. 처리하고 넘어간 아이는 taken[] 이라는 boolean형의 배열로 만들어서 처리한다. 이것 역시 책을 보기 전에는 생각해내지 못할만한 것이었다. 내가 혼자서 구현했다면 아마 좀더 무식한 방법으로 만들었을 것 같다.&lt;br /&gt;
3. 질문, 혹은 처리해야 하는 부분을 함수로 따로 구현한다. 이것은 java와 같은 OOP 언어라면 당연히 해야 할 일이다. 그러나 문제를 풀다보면 무식하게 main함수 안에 모든 로직을 우겨넣고 있는 나를 발견하게 된다 ㅠㅠ. 꼭 이 알고리즘 공부가 아니더라도 개발자로서 어떤 프로그램을 설계하고 코딩할 때 자연스럽게 함수를 만들고 필요하면 클래스도 만드는 능력이 시급하게 필요한듯...&lt;/p&gt;
&lt;p&gt;결국 알고리즘을 공부하기 위해서 이 책을 보고, 알고스팟 사이트에서 문제를 푸는 것들이 전반적인 개발자의 기초체력(?)에 큰 도움이 됨을 몸으로 체득하고 있다. 다음 문제는 제발 혼자서 풀 수 있기를….&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://golch51.files.wordpress.com/2015/04/e76dd4c0ae51c36d98aa3d807e559a28.png&quot;&gt;&lt;img src=&quot;/assets/e76dd4c0ae51c36d98aa3d807e559a28.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;620&quot; class=&quot;alignnone size-full wp-image-403&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;암튼 책의 해설 덕분에 한방에 해결!ㅋㅋㅋ&lt;br /&gt;
다음에는 막혔던 NQUEEN 에 도전합니다.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br /&gt;
import java.util.Scanner;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;/p&gt;
&lt;p&gt;    int n;&lt;br /&gt;
    boolean[][] areFriends = new boolean[10][10];&lt;br /&gt;
    //taken[i] = i 번째 학생이 짝을 이미 찾았으면 true, 아니면 false&lt;/p&gt;
&lt;p&gt;    int countPairings(boolean taken[],boolean[][] areFriends){&lt;br /&gt;
        //남은 학생들 중 가장 번호가 빠른 학생을 찾는다.&lt;br /&gt;
        int firstFree = -1;&lt;/p&gt;
&lt;p&gt;        for(int i=0; i&amp;lt;n; ++i){&lt;br /&gt;
            if(!taken[i]){&lt;br /&gt;
                firstFree = i;&lt;br /&gt;
                break;&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;        //기저 사례 : 모든 학생이 짝을 찾았으면 한 가지 방법을 찾았으니 종료한다.&lt;br /&gt;
        if(firstFree == -1){&lt;br /&gt;
            return 1;&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;        int ret = 0;&lt;/p&gt;
&lt;p&gt;        //이 학생과 짝지을 학생을 결정한다.&lt;br /&gt;
        for(int pairWith = firstFree + 1; pairWith &amp;lt; n; ++pairWith){&lt;/p&gt;
&lt;p&gt;            if(!taken[pairWith] &amp;amp;&amp;amp; areFriends[firstFree][pairWith]){&lt;br /&gt;
                taken[firstFree] = taken[pairWith] = true;&lt;br /&gt;
                ret += countPairings(taken,areFriends);&lt;br /&gt;
                taken[firstFree] = taken[pairWith] = false;&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;        return ret;&lt;br /&gt;
    }&lt;/p&gt;
&lt;p&gt;    public static void main(String[] args){&lt;br /&gt;
        Scanner sc = new Scanner(System.in);&lt;br /&gt;
        int T = sc.nextInt();&lt;br /&gt;
        int[] n = new int[T];//학생의 수.(2~10)&lt;br /&gt;
        int[] m = new int[T];//친구 쌍의 수.(0~ n(n-1)/2)&lt;br /&gt;
        int tmp = 0;&lt;br /&gt;
        int[] answer = new int[T];&lt;/p&gt;
&lt;p&gt;        if(T&amp;lt;=50){&lt;br /&gt;
            for(int i=0; i&amp;lt;T; i++){&lt;/p&gt;
&lt;p&gt;                n[i] = sc.nextInt();&lt;br /&gt;
                m[i] = sc.nextInt();&lt;/p&gt;
&lt;p&gt;                Main obj = new Main();&lt;br /&gt;
                boolean[] taken = new boolean[n[i]];&lt;br /&gt;
                obj.n = n[i];&lt;br /&gt;
                int friend1 = 0, friend2 = 0;&lt;/p&gt;
&lt;p&gt;                if( (2&amp;lt;=n[i]) &amp;amp;&amp;amp; (n[i]&amp;lt;=10) ){&lt;br /&gt;
                    if( (0&amp;lt;=m[i]) &amp;amp;&amp;amp; (m[i] &amp;lt;= n[i] * (n[i] -1) / 2) ){&lt;br /&gt;
                        for(int j=0; j friend2){&lt;br /&gt;
                                tmp = friend1;&lt;br /&gt;
                                friend1 = friend2;&lt;br /&gt;
                                friend2 = tmp;&lt;br /&gt;
                            }&lt;/p&gt;
&lt;p&gt;                            obj.areFriends[friend1][friend2] = true;&lt;br /&gt;
                        }&lt;br /&gt;
                        answer[i] = obj.countPairings(taken,obj.areFriends);&lt;br /&gt;
                    }&lt;br /&gt;
                }&lt;br /&gt;
            }&lt;/p&gt;
&lt;p&gt;            for(int i=0; i&amp;lt;T; i++){&lt;br /&gt;
                System.out.println(answer[i]);&lt;br /&gt;
            }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;    }&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;100%&quot;&gt;
&lt;tr&gt;
&lt;td&gt;이 글은 Evernote에서 작성되었습니다. Evernote는 하나의 업무 공간입니다. &lt;a href=&quot;https://www.evernote.com/getit?email_name=emailNote&amp;amp;email_guid=49ca88ff-a174-457e-8ce4-af2240358799&amp;amp;email_link=download_app&quot;&gt;Evernote를 다운로드하세요&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 17:57:19 +0900</pubDate>
        <link>http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/09/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-8.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/09/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-8.html</guid>
        
        <category>algospot</category>
        
        <category>featured</category>
        
        <category>알고리즘</category>
        
        <category>JAVA</category>
        
        
        <category>프로그래밍</category>
        
      </item>
    
      <item>
        <title>알고리즘 공부 #7</title>
        <description>&lt;p&gt;Algospot 튜토리얼 문제 BRACKETS2&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://algospot.com/judge/problem/read/BRACKETS2&quot;&gt;https://algospot.com/judge/problem/read/BRACKETS2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;영어문제..ㄷㄷㄷ&lt;/p&gt;
&lt;p&gt;Bracket. 괄호에 관련된 문제인가보다.&lt;br /&gt;
Round brackets ()&lt;br /&gt;
Curly brackets {}&lt;br /&gt;
Square brackets []&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;모든 괄호는 항상 쌍으로 나온다.&lt;/li&gt;
&lt;li&gt;열리는것 먼저, 닫히는것은 나중.&lt;/li&gt;
&lt;li&gt;{(}) 이런 식으로는 되지 않는다. 열리면 일단 닫히고 다음 괄호가 와야 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;입,출력.&lt;br /&gt;
1. 테스트케이스 (1&amp;lt;= T &amp;lt;=100)&lt;br /&gt;
2. 입력은 괄호 문자열로 받고 최대 10000.&lt;br /&gt;
3. 조건에 맞으면 YES 틀리면 NO를 출력한다.&lt;/p&gt;
&lt;p&gt;이 문제는 ArrayList를 반드시 사용해야 한다. 단순 char배열은 중간 값을 지울 수가 없는데, 이 문제는 괄호가 짝을 찾은 경우 소거해가면서 풀어야 정상적인 로직을 만들 수 있다.&lt;/p&gt;
&lt;p&gt;내가 만든 로직은 루프를 돌면서 각 char를 검사하고 () {} [] 가 있는 경우 이를 소거한다. 그리고 소거된 값으로 다시 루프를 돌아 소거하는 일을 반복한다. 만일 이 배열의 길이가 0이 되면 YES가 되고 이전 배열 길이에서 줄어들지 않았다면 NO가 되면서 루프를 종료한다.&lt;/p&gt;
&lt;p&gt;꼼꼼히 짠다고 짰는데 그래도 버그가 생긴다 ㅠㅠ 역시 문서를 만들어놓고 코딩하는 습관을 들이는게 중요한 것 같다. 다음 문제때는 한번 간단한 문서를 만들어놓고 코딩을 해봐야겠다.&lt;br /&gt;
&lt;a href=&quot;http://golch51.files.wordpress.com/2015/04/ae5097f988268e16324a9758b77dddf6.png&quot;&gt;&lt;img src=&quot;/assets/ae5097f988268e16324a9758b77dddf6.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;681&quot; class=&quot;alignnone size-full wp-image-397&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br /&gt;
import java.util.ArrayList;&lt;br /&gt;
import java.util.List;&lt;br /&gt;
import java.util.Scanner;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;/p&gt;
&lt;p&gt;    public static char searchBracketPair(char originalBracket){&lt;br /&gt;
        char pairBracket;&lt;/p&gt;
&lt;p&gt;        if(originalBracket == &amp;#039;[&amp;#039;){&lt;br /&gt;
            pairBracket = &amp;#039;]&amp;#039;;&lt;br /&gt;
        }&lt;br /&gt;
//      else if(originalBracket == &amp;#039;]&amp;#039;){&lt;br /&gt;
//          pairBracket = &amp;#039;[&amp;#039;;&lt;br /&gt;
//      }&lt;br /&gt;
        else if(originalBracket == &amp;#039;(&amp;#039;){&lt;br /&gt;
            pairBracket = &amp;#039;)&amp;#039;;&lt;br /&gt;
        }&lt;br /&gt;
//      else if(originalBracket == &amp;#039;)&amp;#039;){&lt;br /&gt;
//          pairBracket = &amp;#039;(&amp;#039;;&lt;br /&gt;
//      }&lt;br /&gt;
        else if(originalBracket == &amp;#039;{&amp;#039;){&lt;br /&gt;
            pairBracket = &amp;#039;}&amp;#039;;&lt;br /&gt;
        }&lt;br /&gt;
//      else if(originalBracket == &amp;#039;}&amp;#039;){&lt;br /&gt;
//          pairBracket = &amp;#039;{&amp;#039;;&lt;br /&gt;
//      }&lt;br /&gt;
        else{&lt;br /&gt;
            pairBracket = &amp;#039;*&amp;#039;;&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;        return pairBracket;&lt;br /&gt;
    }&lt;/p&gt;
&lt;p&gt;    //먼저 입력값이 짝수인지 확인. 홀수이면 그냥 끝.&lt;br /&gt;
    //그리고 입력값 중에 괄호가 아닌애가 있는지 확인. 아니면 끝.&lt;br /&gt;
    public static boolean isScannerValid(char[] scanner){&lt;br /&gt;
        boolean returnValue = false;&lt;/p&gt;
&lt;p&gt;        if(scanner.length%2 == 0){&lt;br /&gt;
            for(int i=0; i&amp;lt;scanner.length; i++){&lt;br /&gt;
                if((scanner[i] == &amp;#039;[&amp;#039;) || (scanner[i] == &amp;#039;]&amp;#039;)&lt;br /&gt;
                        || (scanner[i] == &amp;#039;{&amp;#039;) || (scanner[i] == &amp;#039;}&amp;#039;)&lt;br /&gt;
                        || (scanner[i] == &amp;#039;(&amp;#039;) || (scanner[i] == &amp;#039;)&amp;#039;)){&lt;br /&gt;
                    returnValue = true;&lt;br /&gt;
                }&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;        return returnValue;&lt;br /&gt;
    }&lt;/p&gt;
&lt;p&gt;    public static void main(String[] args) {&lt;/p&gt;
&lt;p&gt;        Scanner sc = new Scanner(System.in);&lt;br /&gt;
        int T = sc.nextInt(); //testcase 의 갯수.&lt;br /&gt;
        String[] brackets = new String[T];&lt;br /&gt;
        char[] elements = new char[10000];//10000 이상인지 확인. 아니면 끝.&lt;/p&gt;
&lt;p&gt;        String[] printValue = new String[T];&lt;/p&gt;
&lt;p&gt;        List&amp;lt;Character&amp;gt; eList = new ArrayList&amp;lt;Character&amp;gt;();&lt;br /&gt;
        int count = 0;&lt;/p&gt;
&lt;p&gt;        if((1 &amp;lt;= T) &amp;amp;&amp;amp; (T &amp;lt;= 100)){&lt;br /&gt;
            for(int i=0; i&amp;lt;T; i++){&lt;br /&gt;
                brackets[i] = sc.next();&lt;br /&gt;
                elements = brackets[i].toCharArray();&lt;/p&gt;
&lt;p&gt;                eList.clear();&lt;br /&gt;
                count = 0;&lt;/p&gt;
&lt;p&gt;                if(isScannerValid(elements)){&lt;/p&gt;
&lt;p&gt;//                  System.out.println(&amp;quot;valid&amp;quot; + elements.length);&lt;/p&gt;
&lt;p&gt;                    for(int j=0; j&amp;lt;elements.length; j++){&lt;br /&gt;
                        eList.add(elements[j]);&lt;/p&gt;
&lt;p&gt;//                      System.out.println(eList.get(j));&lt;br /&gt;
                    }&lt;/p&gt;
&lt;p&gt;//                  System.out.println(&amp;quot;1. &amp;quot;+eList.size());&lt;br /&gt;
//                  System.out.println(&amp;quot;2. &amp;quot;+count);&lt;/p&gt;
&lt;p&gt;                    //비교하기위한 로직.&lt;br /&gt;
                    while((eList.size() != 0) &amp;amp;&amp;amp; (count != eList.size()) ){&lt;br /&gt;
                        count = eList.size();&lt;/p&gt;
&lt;p&gt;                        for(int j=0; j&amp;lt;eList.size()-1; j++){&lt;br /&gt;
                            if(eList.get(j+1) == searchBracketPair(eList.get(j))){&lt;br /&gt;
                                eList.remove(j);&lt;br /&gt;
//                              System.out.println(&amp;quot;::: &amp;quot; + j + eList.toString());&lt;/p&gt;
&lt;p&gt;                                eList.remove(j);&lt;br /&gt;
//                              System.out.println(&amp;quot;::: &amp;quot;+eList.toString());&lt;br /&gt;
                            }else{&lt;br /&gt;
//                              System.out.println(&amp;quot;??????&amp;quot;);&lt;br /&gt;
                            }&lt;br /&gt;
                        }&lt;br /&gt;
//                      System.out.println(eList.size());&lt;/p&gt;
&lt;p&gt;                        if(eList.size() == 0){&lt;br /&gt;
                            printValue[i] = &amp;quot;YES&amp;quot;;&lt;br /&gt;
                        }else{&lt;br /&gt;
                            printValue[i] = &amp;quot;NO&amp;quot;;&lt;br /&gt;
                        }&lt;br /&gt;
                    }&lt;/p&gt;
&lt;p&gt;                }else{&lt;br /&gt;
                    printValue[i] = &amp;quot;NO&amp;quot;;&lt;br /&gt;
                }&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;            for(int i=0; i&amp;lt;T; i++){&lt;br /&gt;
                System.out.println(printValue[i]);&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;100%&quot;&gt;
&lt;tr&gt;
&lt;td&gt;이 글은 Evernote에서 작성되었습니다. Evernote는 하나의 업무 공간입니다. &lt;a href=&quot;https://www.evernote.com/getit?email_name=emailNote&amp;amp;email_guid=f3474596-e623-472e-ac40-2b8cc9245958&amp;amp;email_link=download_app&quot;&gt;Evernote를 다운로드하세요&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 14:47:14 +0900</pubDate>
        <link>http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/03/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-7.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/03/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-7.html</guid>
        
        <category>algospot</category>
        
        <category>featured</category>
        
        <category>알고리즘</category>
        
        <category>JAVA</category>
        
        
        <category>프로그래밍</category>
        
      </item>
    
      <item>
        <title>알고리즘 공부 #6</title>
        <description>&lt;p&gt;Algospot 튜토리얼 문제 &lt;a href=&quot;https://algospot.com/judge/problem/read/XHAENEUNG&quot;&gt;XHAENEUNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://algospot.com/judge/problem/read/XHAENEUNG&quot;&gt;https://algospot.com/judge/problem/read/XHAENEUNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;사칙연산을 채점하는 프로그램 만들기. 단, 숫자는 입력/출력 모두 영어로 쓰여져 있고 답을 할 때 철자의 순서가 달라도 정답과 같은 철자 수를 가지고 있으면 정답으로 처리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테스트 케이스 T 의 제한은 없다.&lt;/li&gt;
&lt;li&gt;문제에 사용할 수 있는 수는 0~10까지. 답이 0 미만이거나 10 초과인 숫자가 나오는 문제라면 무조건 오답처리 한다.&lt;/li&gt;
&lt;li&gt;숫자와 연산기호는 공백으로 구분한다.&lt;/li&gt;
&lt;li&gt;철자의 순서가 바뀌어도 개수가 같다면 정답으로 처리한다.&lt;/li&gt;
&lt;li&gt;출력은 정답이면 “Yes” 오답이면 “No”를 출력한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기까지 써놓고 열심히 프로그램을 짰는데.. 결론부터 말하면 4번에서 좀 많이 헤멨다. 아무래도 나는 자료구조가 약한것 같군. char배열에서 같은 값이 있을 경우 하나씩 지우려고 했는데, 배열에서는 지울 수가 없더라… 그래서 ‘*’로 치환하여 해결함ㅋㅋ 꼼수 ㅋㅋㅋ&lt;br /&gt;
이 부분(철자 바뀌어도 정답처리 해주는 부분)을 제외하고 나머지 부분은 특별히 어려운 부분은 없었다.&lt;/p&gt;
&lt;p&gt;오답이 난건 테스트로 출력하는 문장을 주석처리 안해서 ㅠㅠ&lt;br /&gt;
아므튼 이렇게 한문제 또 해결!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://golch51.files.wordpress.com/2015/04/5dd01308894c402427f9118bdc7cb9de.png&quot;&gt;&lt;img src=&quot;/assets/5dd01308894c402427f9118bdc7cb9de.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;682&quot; class=&quot;alignnone size-full wp-image-393&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br /&gt;
import java.util.Scanner;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;br /&gt;
    public static void main(String[] args) {&lt;br /&gt;
        Scanner sc = new Scanner(System.in);&lt;/p&gt;
&lt;p&gt;        int T = sc.nextInt();&lt;br /&gt;
        String[] ans = new String[T];//정답,오답을 구분 후 출력하기 위한 배열.&lt;br /&gt;
        String[] element = new String[5];//각 숫자 및 연산기호를 처리하기 위한 배열.&lt;/p&gt;
&lt;p&gt;        String[] engNum = {&amp;quot;zero&amp;quot;,&amp;quot;one&amp;quot;,&amp;quot;two&amp;quot;,&amp;quot;three&amp;quot;,&amp;quot;four&amp;quot;,&amp;quot;five&amp;quot;&lt;br /&gt;
                ,&amp;quot;six&amp;quot;,&amp;quot;seven&amp;quot;,&amp;quot;eight&amp;quot;,&amp;quot;nine&amp;quot;,&amp;quot;ten&amp;quot;};&lt;br /&gt;
        int[] num = {0,1,2,3,4,5,6,7,8,9,10};&lt;br /&gt;
        int x = 0, y = 0;&lt;br /&gt;
        int answer = 0;&lt;/p&gt;
&lt;p&gt;        char[] elements = new char[10];&lt;br /&gt;
        char[] answers = new char[10];&lt;/p&gt;
&lt;p&gt;        int count=0;&lt;/p&gt;
&lt;p&gt;        ///////////변수 선언.&lt;/p&gt;
&lt;p&gt;        for(int i=0; i&amp;lt;T; i++){&lt;br /&gt;
            for(int j=0; j&amp;lt;5; j++){&lt;br /&gt;
                element[j] = sc.next();&lt;br /&gt;
//              System.out.println(&amp;quot;element[&amp;quot; +j+&amp;quot;]: &amp;quot;+element[j]);&lt;br /&gt;
            }&lt;/p&gt;
&lt;p&gt;//          for(int j=0; j&amp;lt;5; j++){&lt;br /&gt;
                //element[0], element[2] 는 숫자.&lt;br /&gt;
                for(int k=0; k&amp;lt;11; k++){&lt;br /&gt;
                    if(element[0].equals(engNum[k])){&lt;br /&gt;
                        x = num[k];&lt;br /&gt;
//                      System.out.println(&amp;quot;x : &amp;quot;+ x);&lt;br /&gt;
                    }&lt;br /&gt;
                    if(element[2].equals(engNum[k])){&lt;br /&gt;
                        y = num[k];&lt;br /&gt;
//                      System.out.println(&amp;quot;y : &amp;quot;+ y);&lt;br /&gt;
                    }&lt;br /&gt;
                }&lt;/p&gt;
&lt;p&gt;                //element[1] 은 연산자.&lt;br /&gt;
                if(element[1].equals(&amp;quot;+&amp;quot;)){//+ 연산일 경우&lt;br /&gt;
                    answer = x + y;&lt;br /&gt;
                }else if(element[1].equals(&amp;quot;-&amp;quot;)){//- 연산일 경우&lt;br /&gt;
                    answer = x - y;&lt;br /&gt;
                }else{//* 연산일 경우&lt;br /&gt;
                    answer = x * y;&lt;br /&gt;
                }&lt;/p&gt;
&lt;p&gt;                if((0 &amp;lt;= answer) &amp;amp;&amp;amp; (answer &amp;lt;= 10)){&lt;br /&gt;
                    if(engNum[answer].equals(element[4])){&lt;br /&gt;
                        ans[i] = &amp;quot;Yes&amp;quot;;&lt;br /&gt;
                    }else{&lt;br /&gt;
                        elements = element[4].toCharArray();&lt;br /&gt;
                        answers = engNum[answer].toCharArray();&lt;/p&gt;
&lt;p&gt;                        if(elements.length == answers.length){&lt;br /&gt;
                            for(int a=0; a&amp;lt;elements.length; a++){&lt;br /&gt;
                                //char 각각 비교하기.&lt;br /&gt;
                                for(int b=0; b&amp;lt;answers.length; b++){&lt;br /&gt;
                                    if(elements[a] == answers[b]){&lt;br /&gt;
                                        elements[a] = &amp;#039;*&amp;#039;;&lt;br /&gt;
                                        answers[b] = &amp;#039;#&amp;#039;;&lt;br /&gt;
                                        count++;&lt;br /&gt;
//                                      System.out.println(elements[a]);&lt;br /&gt;
                                    }&lt;br /&gt;
                                }&lt;br /&gt;
                            }&lt;/p&gt;
&lt;p&gt;                            if(count == elements.length){&lt;br /&gt;
                                ans[i] = &amp;quot;Yes&amp;quot;;&lt;br /&gt;
//                              System.out.println(count);&lt;br /&gt;
                            }else{&lt;br /&gt;
                                ans[i] = &amp;quot;No&amp;quot;;&lt;br /&gt;
//                              System.out.println(count);&lt;br /&gt;
                            }&lt;/p&gt;
&lt;p&gt;                            count =0;&lt;/p&gt;
&lt;p&gt;                        }else{&lt;br /&gt;
                            ans[i] = &amp;quot;No&amp;quot;;&lt;br /&gt;
                        }&lt;br /&gt;
                    }&lt;br /&gt;
//                  ans[i] = engNum[answer];&lt;br /&gt;
//                  System.out.println(&amp;quot;ans : &amp;quot;+ answer);&lt;br /&gt;
                }else{&lt;br /&gt;
                    ans[i] = &amp;quot;No&amp;quot;;&lt;br /&gt;
                }&lt;br /&gt;
//          }&lt;/p&gt;
&lt;p&gt;        }&lt;br /&gt;
        for(int i=0; i&amp;lt;T; i++){&lt;br /&gt;
            System.out.println(ans[i]);&lt;br /&gt;
        }&lt;/p&gt;
&lt;p&gt;    }&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;100%&quot;&gt;
&lt;tr&gt;
&lt;td&gt;이 글은 Evernote에서 작성되었습니다. Evernote는 하나의 업무 공간입니다. &lt;a href=&quot;https://www.evernote.com/getit?email_name=emailNote&amp;amp;email_guid=1049d900-abf7-4612-a854-8859bbf3b41a&amp;amp;email_link=download_app&quot;&gt;Evernote를 다운로드하세요&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 02 Apr 2015 16:04:37 +0900</pubDate>
        <link>http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/02/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-6.html</link>
        <guid isPermaLink="true">http://golch.gitub.io/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/2015/04/02/ec-95-8c-ea-b3-a0-eb-a6-ac-ec-a6-98-ea-b3-b5-eb-b6-80-6.html</guid>
        
        <category>algospot</category>
        
        <category>featured</category>
        
        <category>알고리즘</category>
        
        <category>JAVA</category>
        
        
        <category>프로그래밍</category>
        
      </item>
    
  </channel>
</rss>
